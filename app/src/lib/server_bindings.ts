// Bindings generated by tauri build.rs (using ts-rs). Do not edit manually.
export type BoneLocation = "Hip" | "LeftUpperLeg" | "RightUpperLeg" | "LeftLowerLeg" | "RightLowerLeg" | "LeftFoot" | "RightFoot" | "Waist" | "Chest" | "UpperChest" | "Neck" | "Head" | "LeftShoulder" | "RightShoulder" | "LeftUpperArm" | "RightUpperArm" | "LeftLowerArm" | "RightLowerArm" | "LeftHand" | "RightHand" | "LeftHip" | "RightHip";
/**
 * Offset type for a specific body part used to offset the bone (joints)
 * See BoneLocation::get_offset
 */
export type BoneOffsetKind = "NeckLength" | "WaistLength" | "ChestLength" | "UpperChestLength" | "HipLength" | "HipsWidth" | "UpperLegLength" | "LowerLegLength" | "ShouldersWidth" | "ShoulderOffset" | "UpperArmLength" | "LowerArmLength" | "FootLength" | "HandLength";
export type GlobalConfig = { trackers: { [key: string]: TrackerConfig }, vmc: VmcConfig, skeleton: SkeletonConfig, };
export type SkeletonConfig = { 
/**
 * Contains the length offset in meters from a bone to its connecting one
 */
offsets: { [key: BoneOffsetKind]: number }, };
/**
 * Seperated from TrackerInfo to be used to save to a file
 */
export type TrackerConfig = { name?: string, location?: BoneLocation, };
export type TrackerData = { orientation: [number, number, number, number], acceleration: [number, number, number], position: [number, number, number], };
export type TrackerInfo = { status: TrackerStatus, latency_ms: number | null, battery_level: number, address: string | null, };
export type TrackerStatus = "Ok" | "Error" | "Off" | "TimedOut";
export type UpdateEvent = { "type": "Error", error: string, } | { "type": "ConfigUpdate" };
export type VmcConfig = { enabled: boolean, send_port: number, receive_port: number, };
export type WebsocketClientMessage = { "type": "SerialSend", data: string, } | { "type": "RemoveTracker", id: string, } | { "type": "UpdateConfig", config: GlobalConfig, };
export type WebsocketServerMessage = { "type": "TrackerInfo", id: string, info: TrackerInfo, } | { "type": "TrackerData", id: string, data: TrackerData, } | { "type": "InitialState", tracker_infos: { [key: string]: TrackerInfo }, config: GlobalConfig, port_name?: string, } | { "type": "SerialLog", log: string, } | { "type": "SerialPortChanged", port_name?: string, } | UpdateEvent;
