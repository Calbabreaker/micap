use std::{
    io::{BufRead, Write},
    path::PathBuf,
    str::FromStr,
};
use ts_rs::TS;

fn main() -> Result<(), Box<dyn std::error::Error>> {
    let bindings_dir =
        PathBuf::from_str(&std::env::var("OUT_DIR").expect("Out dir env not found"))?
            .join("bindings");

    micap_server::tracker::TrackerInfo::export_all_to(&bindings_dir)?;
    micap_server::tracker::TrackerData::export_all_to(&bindings_dir)?;
    micap_server::websocket::WebsocketServerMessage::export_all_to(&bindings_dir)?;
    micap_server::websocket::WebsocketClientMessage::export_all_to(&bindings_dir)?;

    // Combine all binding files into one
    let mut output = std::fs::File::create("../src/lib/server_bindings.ts")?;
    writeln!(
        output,
        "// Bindings generated by tauri build.rs (using ts-rs). Do not edit manually."
    )?;

    let mut paths = std::fs::read_dir(&bindings_dir)?
        .map(|entry| entry.unwrap().path())
        .collect::<Vec<_>>();
    paths.sort_unstable();

    for path in paths {
        let file = std::fs::File::open(path)?;
        let reader = std::io::BufReader::new(file);

        for line in reader.lines() {
            let line = line?;
            if !line.is_empty() && !line.starts_with("//") && !line.starts_with("import") {
                writeln!(output, "{}", line)?;
            }
        }
    }

    std::fs::remove_dir_all(&bindings_dir)?;

    tauri_build::build();
    Ok(())
}
